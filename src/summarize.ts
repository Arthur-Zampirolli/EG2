import { readFileSync, writeFileSync, unlinkSync } from "fs";
import { existsSync } from "fs";
import puppeteer from "puppeteer";
import * as dotenv from 'dotenv';

dotenv.config({ path: ".env" });

interface ICommentData {
  pr_id: number;
  comment: string;
}

interface IAnalysisResults {
  totalComments: number;
  uniquePRs: number;
  avgCommentsPerPR: number;
  avgCommentLengthChars: number;
  avgCommentLengthWords: number;
  thanksCount: number;
  repositoryUrl: string;
}

async function main() {
  console.log("üìä Iniciando an√°lise para relat√≥rio PDF...");
  
  // Verificar se o CSV existe
  const csvPath = "pull_requests_comments.csv";
  if (!existsSync(csvPath)) {
    console.error("‚ùå Arquivo CSV n√£o encontrado! Execute 'yarn analyze' primeiro.");
    process.exit(1);
  }
  
  // Ler e analisar dados do CSV
  const analysisResults = await analyzeCSVData(csvPath);
  
  // Gerar HTML para o relat√≥rio
  const htmlContent = generateReportHTML(analysisResults);
  
  // Gerar PDF
  await generatePDF(htmlContent, "relatorio_analise_prs.pdf");
  
  // Limpeza final - garantir que n√£o h√° arquivos tempor√°rios
  try {
    if (existsSync("temp_report.html")) {
      unlinkSync("temp_report.html");
    }
  } catch (e) {
    // Silenciosamente ignora erros de limpeza final
  }
  
  console.log("‚úÖ Relat√≥rio PDF gerado: relatorio_analise_prs.pdf");
}

async function analyzeCSVData(csvPath: string): Promise<IAnalysisResults> {
  console.log("üîç Analisando dados do CSV...");
  const csvContent = readFileSync(csvPath, 'utf-8');

  const lines = csvContent.split('\n').slice(1); // Remove header
  const comments: ICommentData[] = [];
  
  // Parse CSV (tratando aspas - v√≠rgulas j√° foram removidas na gera√ß√£o)
  for (const line of lines) {
    if (line.trim() === '') continue;
    

    const splitted = line.split(',')
    const pr_id = parseInt(splitted[0]);
    const comment = splitted[1].replace(/""/g, '"'); // Unescape aspas duplas
    comments.push({ pr_id, comment });
  }
  
  // An√°lises
  const totalComments = comments.length;
  const uniquePRs = new Set(comments.map(c => c.pr_id)).size;
  const avgCommentsPerPR = totalComments / uniquePRs;
  
  // An√°lise de tamanho dos coment√°rios
  const commentLengths = comments.map(c => c.comment.length);
  const avgCommentLengthChars = commentLengths.reduce((a, b) => a + b, 0) / commentLengths.length;
  
  const commentWords = comments.map(c => c.comment.split(/\s+/).length);
  const avgCommentLengthWords = commentWords.reduce((a, b) => a + b, 0) / commentWords.length;
  
  // Contagem de agradecimentos (ingl√™s e portugu√™s)
  const thanksPatterns = [
    /thank you/i,
    /thanks/i,
    /tks/i,
    /obrigado/i,
    /obrigada/i,
    /valeu/i,
    /obg/i,
    /vlw/i,
    /brigado/i,
    /brigada/i
  ];
  
  let thanksCount = 0;
  comments.forEach(comment => {
    for (const pattern of thanksPatterns) {
      if (pattern.test(comment.comment)) {
        thanksCount++;
        break; // Conta apenas uma vez por coment√°rio
      }
    }
  });
  return {
    totalComments,
    uniquePRs,
    avgCommentsPerPR,
    avgCommentLengthChars,
    avgCommentLengthWords,
    thanksCount,
    repositoryUrl: "https://github.com/microsoft/vscode"
  };
}

function generateReportHTML(results: IAnalysisResults): string {
  return `
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Relat√≥rio de An√°lise de Pull Requests</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            margin: 40px;
            color: #333;
        }
        .header {
            text-align: center;
            border-bottom: 3px solid #0066cc;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .header h1 {
            color: #0066cc;
            margin-bottom: 10px;
        }
        .header p {
            color: #666;
            font-size: 14px;
        }
        .question {
            background-color: #f8f9fa;
            border-left: 4px solid #0066cc;
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
        }
        .question-title {
            font-weight: bold;
            color: #0066cc;
            margin-bottom: 10px;
        }
        .answer {
            background-color: white;
            padding: 10px;
            border-radius: 3px;
            border: 1px solid #ddd;
        }
        .highlight {
            background-color: #e3f2fd;
            padding: 2px 4px;
            border-radius: 3px;
            font-weight: bold;
        }
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
            text-align: center;
            color: #666;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Relat√≥rio de An√°lise de Pull Requests</h1>
        <p>An√°lise automatizada de coment√°rios em reposit√≥rios GitHub</p>
        <p>Data de gera√ß√£o: ${new Date().toLocaleDateString('pt-BR')}</p>
    </div>

    <div class="question">
        <div class="question-title">a) Qual √© o n√∫mero do Grupo e os nomes dos participantes?</div>
        <div class="answer">
            <strong>Participantes:</strong> Arthur Zampirolli, Elias Lopes, Victor Albino e Victor Fernandes
        </div>
    </div>

    <div class="question">
        <div class="question-title">b) Qual foi o reposit√≥rio analisado (URL do GitHub)?</div>
        <div class="answer">
            <strong>Reposit√≥rio:</strong> <span class="highlight">${results.repositoryUrl}</span>
        </div>
    </div>

    <div class="question">
        <div class="question-title">c) Quantos coment√°rios foram obtidos no total?</div>
        <div class="answer">
            <strong>Total de coment√°rios:</strong> <span class="highlight">${results.totalComments}</span> coment√°rios
        </div>
    </div>

    <div class="question">
        <div class="question-title">d) Qual √© o n√∫mero m√©dio de coment√°rios por pull request na amostra analisada?</div>
        <div class="answer">
            <strong>M√©dia de coment√°rios por PR:</strong> <span class="highlight">${results.avgCommentsPerPR.toFixed(2)}</span> coment√°rios/PR<br>
            <small>Baseado em ${results.uniquePRs} PRs √∫nicos analisados</small>
        </div>
    </div>

    <div class="question">
        <div class="question-title">e) Qual √© o tamanho m√©dio dos coment√°rios na amostra? (Caracteres e palavras)</div>
        <div class="answer">
            <strong>Tamanho m√©dio:</strong><br>
            ‚Ä¢ <span class="highlight">${results.avgCommentLengthChars.toFixed(0)}</span> caracteres por coment√°rio<br>
            ‚Ä¢ <span class="highlight">${results.avgCommentLengthWords.toFixed(1)}</span> palavras por coment√°rio
        </div>
    </div>

    <div class="question">
        <div class="question-title">f) Quantos coment√°rios possuem palavras de agradecimento?</div>
        <div class="answer">
            <strong>Coment√°rios com agradecimentos:</strong> <span class="highlight">${results.thanksCount}</span> coment√°rios<br>
            <small>Palavras pesquisadas: "Thank you", "Thanks", "Tks", "Obrigado", "Obrigada", "Valeu", "Obg", "Vlw"</small><br>
            <strong>Percentual:</strong> ${((results.thanksCount / results.totalComments) * 100).toFixed(1)}% dos coment√°rios
        </div>
    </div>

    <div class="footer">
        <p>Relat√≥rio gerado automaticamente pelo sistema de an√°lise de PRs</p>
        <p>Ferramenta desenvolvida para an√°lise de reposit√≥rios GitHub via GraphQL API</p>
    </div>
</body>
</html>
  `;
}

async function generatePDF(htmlContent: string, outputPath: string) {
  console.log("üìÑ Gerando PDF...");
  
  // Salvar HTML tempor√°rio
  const tempHtmlPath = "temp_report.html";
  writeFileSync(tempHtmlPath, htmlContent);
  
  // Gerar PDF com Puppeteer
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  
  await page.goto(`file://${process.cwd()}/${tempHtmlPath}`, {
    waitUntil: 'networkidle0'
  });
  
  await page.pdf({
    path: outputPath,
    format: 'A4',
    printBackground: true,
    margin: {
      top: '20mm',
      right: '20mm',
      bottom: '20mm',
      left: '20mm'
    }
  });
  
  await browser.close();
  
  // Remover arquivo tempor√°rio
  try {
    unlinkSync(tempHtmlPath);
    console.log("üóëÔ∏è  Arquivo tempor√°rio removido");
  } catch (e) {
    console.warn("‚ö†Ô∏è  N√£o foi poss√≠vel remover o arquivo tempor√°rio:", tempHtmlPath);
    console.warn("Erro:", e.message);
  }
}

main().catch(console.error);
